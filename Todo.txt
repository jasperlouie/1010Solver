TODO:
Major:
[] Make moves more compact: location can be stored in a single char, so they can be represented by two chars
[] Keep a log of moves when playing a game (so you can replay any game) 
[] Make boards hash to binary literals preceded by 3 chars signifying pieces (conserves memory and will allow speedup in mapping moves)
[] make utility to save results of run as .json files, and make sure to include tags with what alg they were run with so they can be aggregated
[] make every .py file just have a dict of title:solvers, and have play.py just append those lists
[] Remake mapping portion in spark so it can be run parallelized
[] Make more heuristics, including ones involving floodfill/trying to keep things together, and just figure out a better way to score
[] Minimax/expectimax
[] Machine learning alg
[] make a script that allows it to work with an android emulator and actually play the game

For Fun:
[] improve misere strategy

Ideas:
[] Maybe in move log, have a char that represents a col/row clear event that is not used in piece dict. that way you can undo moves and not have to copy so many boards
[] if you change board encoding to bits completely, you can use bit manips to edit it? but prob not because understandability over structure?